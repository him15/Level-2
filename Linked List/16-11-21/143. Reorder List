================================================JAVA

class Solution {
public void reorderList(ListNode head) {
        ListNode curr1 = head;
        ListNode mid = midNode(head);
        ListNode curr2 = reverseList(mid);
         
        while(curr1 != null){
            ListNode frw1 = curr1.next;
            ListNode frw2 = curr2.next;
            
            curr1.next = curr2;
            curr2.next = frw1;
            curr1 = frw1;
            curr2 = frw2;
        }
    }
    
    
    public ListNode midNode(ListNode head){
        if(head == null){
            return head;
        }
        ListNode slow = head;
        ListNode fast = head;
        while(fast.next != null && fast.next.next != null){
            fast = fast.next.next;
            slow = slow.next;
        }
        return slow;
    } 
    
    public ListNode reverseList(ListNode head) {
        if(head == null || head.next == null){
            return head;
        }
        ListNode curr = head;
        ListNode prev = null;
        
        while(curr != null){
            ListNode frw = curr.next;
            curr.next = prev;
            prev = curr;
            curr = frw;
        }
        return prev;
    }
}




============================================CPP
class Solution {
public:
    void reorderList(ListNode* head) {
        ListNode* curr1 = head;
        ListNode* mid = midNode(head);
        ListNode* curr2 = reverseList(mid);
         
        while(curr1 != nullptr){
            ListNode* frw1 = curr1->next;
            ListNode* frw2 = curr2->next;
            
            curr1->next = curr2;
            curr2->next = frw1;
            curr1 = frw1;
            curr2 = frw2;
        }
    }
    
    ListNode* midNode(ListNode* head){
        if(head == nullptr){
            return head;
        }
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next != nullptr && fast->next->next != nullptr){
            fast = fast->next->next;
            slow = slow->next;
        }
        return slow;
    }
    
    ListNode* reverseList(ListNode* head) {
        if(head == nullptr || head->next == nullptr){
            return head;
        }
        ListNode* curr = head;
        ListNode* prev = nullptr;
        
        while(curr != nullptr){
            ListNode* frw = curr->next;
            curr->next = prev;
            prev = curr;
            curr = frw;
        }
        return prev;
    }
};
