class Solution {
    public ListNode middleNode(ListNode head) {
        if(head == null){
            return head;
        }
        ListNode slow = head;
        ListNode fast = head;
        ListNode temp = null;
        while(fast != null && fast.next != null){
            
            fast = fast.next.next;
            temp = slow;
            slow = slow.next;
        }
        
        temp.next = null;
        
        return slow;
    }
    
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null){
            return l2;
        }else if(l2 == null){
            return l1;
        }
        ListNode dummy = null;
        ListNode pre = null;
        if(l1.val <= l2.val){
            dummy = l1;
            l1 = l1.next;
            pre = dummy;
        }else{
            dummy = l2;
            l2 = l2.next;
            pre = dummy;
        }
        
        while(l1 != null && l2 != null){
            if(l1.val <= l2.val){
                pre.next = l1;
                pre = l1;
                l1 = l1.next;
            }else{
                pre.next = l2;
                pre = l2;
                l2 = l2.next;
            }
        }
        if(l1 != null){
            pre.next = l1;
        }
        if(l2 != null){
            pre.next = l2;
        }
        return dummy;
    }
    
    public ListNode sortList(ListNode head) {
        if(head == null){
            return null;
        }
        if(head.next == null){
            return head;
        }
        ListNode mid = middleNode(head);
        
        ListNode left = sortList(head);
        ListNode right = sortList(mid);
        
        return mergeTwoLists(left, right);
    }
}
