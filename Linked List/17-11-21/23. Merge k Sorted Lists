class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if(l1 == null){
            return l2;
        }else if(l2 == null){
            return l1;
        }
        ListNode dummy = null;
        ListNode pre = null;
        if(l1.val <= l2.val){
            dummy = l1;
            l1 = l1.next;
            pre = dummy;
        }else{
            dummy = l2;
            l2 = l2.next;
            pre = dummy;
        }
        
        while(l1 != null && l2 != null){
            if(l1.val <= l2.val){
                pre.next = l1;
                pre = l1;
                l1 = l1.next;
            }else{
                pre.next = l2;
                pre = l2;
                l2 = l2.next;
            }
        }
        if(l1 != null){
            pre.next = l1;
        }
        if(l2 != null){
            pre.next = l2;
        }
        return dummy;
    }
    
    public ListNode mergeSort(ListNode[] lists, int si, int ei){
        if(si == ei){
            return lists[ei];
        }
        int mid = (si + ei) / 2;
        
        ListNode left = mergeSort(lists, si, mid);
        ListNode right = mergeSort(lists, mid + 1, ei);
        
        ListNode merged = mergeTwoLists(left, right);
        return merged;
    }
    
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists.length == 0){
            return null;
        }
        return mergeSort(lists, 0, lists.length - 1);
    }
}
